citation("abn")
sal_outbrk <- read.csv("~/Downloads/preparationecvphws/sal_outbrk.csv", sep=";")
View(sal_outbrk)
salm <- read.csv("data/sal_outbrk.csv",
header = TRUE, sep = ";")
salm[,4:17] <- as.data.frame(lapply(salm[,4:17], factor))
mod1 <- glm(formula = casecontrol ~ age + gender + eatbeef + eatpork + eatveal + eatlamb + eatpoul + eatcold + eatveg + eatfruit + eateggs + slt_a + dlr_a + dlr_b, family = binomial(link = logit),data = salm)
summary(mod1)
salm.cc <- salm[complete.cases(salm),]
mod2 <- glm(formula = casecontrol ~ age + gender + eatbeef + eatpork + eatveal + eatlamb + eatpoul + eatcold + eatveg + eatfruit + eateggs + slt_a + dlr_a + dlr_b, family = binomial(link = logit),data = salm.cc)
summary(mod2)
mod2 <- glm(formula = casecontrol ~  eatbeef + eatpork + eatveal + eatlamb + eatpoul + eatcold + eatveg + eatfruit + eateggs + slt_a + dlr_a + dlr_b, family = binomial(link = logit),data = salm)
mod1$coef
mod2$coef
library(MASS)
mod3 <- stepAIC(object = mod2,direction = "both", trace = FALSE)
mod2
knitr::opts_chunk$set(echo = FALSE, warning=FALSE, message=FALSE, collapse=FALSE,
fig.align='center', fig.height=3, fig.width=5, comment = NA)
options(scipen=999)
dt <- readRDS("dataOK.RDS")
library(knitr)
library(kableExtra)
head(dt)
mm <- data.frame(Variable = colnames(dt),
Meaning = c("presence of atrophic rhinitis (0/1)",
"presence of pneumonia (0/1)",
"presence of moderate to severe pneumonia (0/1)",
"sex of the pig (1=female, 0=castrated)",
"presence of liver damage (parasite-induced white spots) (0/1)",
"presence of fecal/gastrointestinal nematode eggs at time of slaughter (0/1)",
"fecal gastriointestinal nematode egg count at time of slaughter (eggs/5g)",
"presece of nematodes in intestine (0/1)",
"count of nematodes in small intestine at time of slaughter (nr.)",
"days elapsed from birth to slaughter (days)",
"average daily weight gain (grams)",
"farm ID"))
kable(mm, row.names = FALSE, digits = 2, align = "ll", "html") %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
par(mfrow=c(2,3), mar=c(2,4,1.5,1))
barplot(table(dt$AR)/341, ylim=c(0,1), main="AR", ylab="proportion")
barplot(table(dt$pneum)/341, ylim=c(0,1), main="pneum", ylab="proportion", col.main = "gray50")
barplot(table(dt$pneumS)/341, ylim=c(0,1), main="pneumS", ylab="proportion")
barplot(table(dt$female)/341, ylim=c(0,1), main="female", ylab="proportion")
barplot(table(dt$livdam)/341, ylim=c(0,1), main="livdam", ylab="proportion")
barplot(table(dt$eggs)/341, ylim=c(0,1), main="eggs", ylab="proportion")
hist(dt$epg5, xlab="", main="epg5",prob=TRUE,col="grey",border="white", col.main = "gray50")
lines(density(dt$epg5),lwd=1.5)
barplot(table(dt$worms)/341, ylim=c(0,1), main="worms", ylab="proportion", col.main = "gray50")
hist(dt$wormCount, xlab="", main="wormCount",prob=TRUE,col="grey",border="white")
lines(density(dt$wormCount),lwd=1.5)
hist(dt$age, xlab="", main="age",prob=TRUE,col="grey",border="white")
lines(density(dt$age),lwd=1.5)
hist(dt$adg, xlab="", main="adg",prob=TRUE,col="grey",border="white")
lines(density(dt$adg),lwd=1.5)
barplot(table(dt$farm), main="Farm ID", ylim=c(0,40), ylab="count", col.main = "gray50")
drop <- which(colnames(dt)%in% c("pneum", "epg5", "worms", "farm"))
abndata <- dt[, -drop]
str(abndata)
abndata[,1:5] <- as.data.frame(lapply(abndata[,1:5], factor))
sum(complete.cases(abndata))
dag <- matrix(0, ncol(abndata), ncol(abndata))
colnames(dag) <- rownames(dag) <- names(abndata)
dist <- list(AR = "binomial", pneumS = "binomial", female="binomial",
livdam= "binomial", eggs = "binomial",wormCount = "poisson",
age= "gaussian", adg = "gaussian")
retain <- matrix(0, ncol(abndata), ncol(abndata))
colnames(retain) <- rownames(retain) <- names(abndata)
banned <- matrix(0, ncol(abndata), ncol(abndata))
colnames(banned) <- rownames(banned) <- names(abndata)
banned[3,-3] <- 1
banned
max.par <- 1
library(abn)
mycache <- buildscorecache(data.df = as.data.frame(abndata), data.dists = dist,
dag.banned = banned, dag.retained = retain,
max.parents = max.par)
mydag <- mostprobable(score.cache = mycache)
fabn <- fitabn(dag.m = mydag, data.df = as.data.frame(abndata), data.dists = dist)
fabn$mlik
datadir <- tempdir()
for (i in 1:7) {
max.par <- i
mycache <- buildscorecache(data.df = as.data.frame(abndata), data.dists = dist,
dag.banned = banned, dag.retained = retain,
max.parents = max.par)
mydag <- mostprobable(score.cache = mycache)
fabn <- fitabn(dag.m = mydag, data.df = as.data.frame(abndata), data.dists = dist)
cat(paste("network score for", i, "parents =", fabn$mlik, "\n\n"))
save(mycache, mydag, fabn, file = paste(datadir,"mp_", max.par,".RData", sep=""))
}
# get network score for all parent limits
# ---------------------------------------
mp.mlik <- c()
for (i in 1:max.par) {
load(paste(datadir,"mp_", i,".RData", sep=""))
mp.mlik <- c(mp.mlik, fabn$mlik)
}
# check how it looks
# ------------------
plot(1:max.par, mp.mlik, xlab = "Parent limit", ylab = "Log marginal likelihood",
type = "b", col="red", ylim=range(mp.mlik))
abline(v=which(mp.mlik==max(mp.mlik))[1], col="grey", lty=2)
mp.mlik
max.par<- which(mp.mlik==max(mp.mlik))[1]
load(paste(datadir,"mp_", max.par,".RData", sep=""))
tographviz(dag.m = mydag, data.df = abndata, data.dists = dist,
outfile = paste("DAG_", which(mp.mlik==max(mp.mlik))[1],
"p.dot", sep=""))
knitr::include_graphics("DAG_4p.png")
v1 <- rnorm(10000, 0, 1)
par(mfrow=c(1,2), mar=c(4,4,2,1))
plot(density(v1), main="Marginal density", xlab=expression(paste("parameter ", beta)),
cex.axis=0.9, cex.main=1)
hist(v1, breaks=100, main="Discretization of marginal density", xlab=expression(paste("parameter ", beta)),
cex.axis=0.9, cex.main=1)
# Fit marginal densities over a fixed grid --> n.grid=1000
# --------------------------------------------------------
marg.f <- fitabn(dag.m = mydag, data.df = as.data.frame(abndata),
data.dists = dist, compute.fixed=TRUE, n.grid=1000)
# Extract values
# --------------
m <- marg.f$marginals[[1]]
for(i in 2: length(marg.f$marginals))
{ m <- c(m, marg.f$marginals[[i]])}
# Bind all the marginals for the same node into a matrix
# ------------------------------------------------------
AR.p <- cbind( m[[ "AR|(Intercept)"]], m[[ "AR|age"]])
pneumS.p <- cbind( m[[ "pneumS|(Intercept)"]], m[[ "pneumS|age"]])
female.p <- cbind( m[[ "female|(Intercept)"]])
livdam.p <- cbind( m[[ "livdam|(Intercept)"]], m[[ "livdam|eggs"]])
eggs.p <- cbind( m[[ "eggs|(Intercept)"]], m[[ "eggs|adg"]])
wormCount.p <- cbind( m[[ "wormCount|(Intercept)"]], m[[ "wormCount|AR"]],
m[[ "wormCount|eggs"]], m[[ "wormCount|age"]], m[[ "wormCount|adg"]])
age.p <- cbind( m[[ "age|(Intercept)"]], m[[ "age|female"]])
prec.age.p <- cbind( m[[ "age|precision" ]])
adg.p <- cbind( m[[ "adg|(Intercept)"]], m[[ "adg|age"]])
prec.adg.p <- cbind( m[[ "adg|precision" ]])
# Save it to a file named PostParams to be read by JAGS
# -----------------------------------------------------
dump(c("AR.p", "pneumS.p", "female.p", "livdam.p", "eggs.p",
"wormCount.p", "age.p", "prec.age.p", "adg.p", "prec.adg.p"),
file="PostParams.R")
library(rjags)
# set inits
# ---------
init <- list(".RNG.name"="base::Mersenne-Twister", ".RNG.seed"=42)
# load data
# ---------
source("PostParams.R")
# run model once
# --------------
jj <- jags.model(file = "model8vPois.bug",
data = list(  'AR.p'=AR.p , 'pneumS.p'=pneumS.p , 'female.p'=female.p,
'livdam.p'=livdam.p , 'eggs.p'=eggs.p , 'wormCount.p'=wormCount.p ,
'age.p'=age.p ,'prec.age.p'=prec.age.p,
'adg.p'=adg.p , 'prec.adg.p'=prec.adg.p),
inits = init,
n.chains = 1,
n.adapt = 5000)
# run more iterations
# -------------------
update(jj, 100000)
# set number of observation we want to extract for a dataset
# ----------------------------------------------------------
n.obs=341
# sample data (same size as original: 341) with a sampling lag (20) to reduce avoid autocorrelation
# -------------------------------------------------------------------------------------------------
samp <- coda.samples(jj, c("AR", "pneumS", "female", "livdam", "eggs",
"wormCount", "age", "prec.age", "adg", "prec.adg"),
n.iter= n.obs*20 , thin =20)
# extract posterior densities and put in a dataframe
# --------------------------------------------------
post.dt <- data.frame(AR = unlist(samp[,"AR"]),
pneumS = unlist(samp[,"pneumS"]),
female = unlist(samp[,"female"]),
livdam = unlist(samp[,"livdam"]),
eggs = unlist(samp[,"eggs"]),
wormCount = unlist(samp[,"wormCount"]),
age = unlist(samp[,"age"]),
adg = unlist(samp[,"adg"]))
# compare with original data
# --------------------------
dt<-abndata
# get centered version of age and adg to compare to bootstrap data
dt$age.c <- (dt$age - mean(dt$age))/sd(dt$age)
dt$adg.c <- (dt$adg - mean(dt$adg))/sd(dt$adg)
# Compare distribution of original and simulated data
# ---------------------------------------------------
par(mfrow=c(1,4), mar=c(2,2,1.5,1))
barplot(table(dt$AR)/n.obs, ylim=c(0,1), main="AR - original")
barplot(table(post.dt$AR)/n.obs,  ylim=c(0,1), main="AR - simulated",
col.main = "blue", border="blue")
barplot(table(dt$pneumS)/n.obs, ylim=c(0,1), main="pneumS - original")
barplot(table(post.dt$pneumS)/n.obs,  ylim=c(0,1), main="pneumS - simulated",
col.main = "blue", border="blue")
barplot(table(dt$female)/n.obs, ylim=c(0,1), main="female - original")
barplot(table(post.dt$female)/n.obs,  ylim=c(0,1), main="female - simulated",
col.main = "blue", border="blue")
barplot(table(dt$livdam)/n.obs, ylim=c(0,1), main="livdam - original")
barplot(table(post.dt$livdam)/n.obs,  ylim=c(0,1), main="livdam - simulated",
col.main = "blue", border="blue")
barplot(table(dt$eggs)/n.obs, ylim=c(0,1), main="eggs - original")
barplot(table(post.dt$eggs)/n.obs,  ylim=c(0,1), main="eggs - simulated",
col.main = "blue", border="blue")
hist(dt$wormCount, xlab="", main="wormCount - original",
prob=TRUE,col="grey",border="white", ylim=c(0,0.6))
lines(density(dt$wormCount),lwd=1.5)
hist(post.dt$wormCount, xlab="", main="wormCount - simulated", col.main = "blue",
prob=TRUE,col="grey",border="white", xlim=c(0,80), ylim=c(0,0.6))
lines(density(post.dt$wormCount),lwd=1.5, col="blue")
hist(dt$age.c, xlab="", main="age - original",
prob=TRUE,col="grey",border="white")
lines(density(dt$age.c),lwd=1.5)
hist(post.dt$age, xlab="", main="age - simulated", col.main = "blue",
prob=TRUE,col="grey",border="white")
lines(density(post.dt$age),lwd=1.5, col="blue")
hist(dt$adg.c, xlab="", main="adg - original",
prob=TRUE,col="grey",border="white")
lines(density(dt$adg.c),lwd=1.5)
hist(post.dt$adg, xlab="", main="adg - simulated", col.main = "blue",
prob=TRUE,col="grey",border="white")
lines(density(post.dt$adg),lwd=1.5, col="blue")
# load the dags and data already condensed (to save time)
n <- 5000
dags <- readRDS("BootDAGs5000.RDS")
sum(mydag)
library(abn)
fitabn
library(car)
?Prestige
